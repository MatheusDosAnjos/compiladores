/*
15/04/2025
UFRGS - INF01147 Compiladores - 2025/1
Matheus Adam dos Anjos
*/

%{
    #include <vector>

    #include "ast.hpp"
    #include "lex.yy.h"
    #include "symbols.hpp"

    extern void yyerror(const char *s);
    extern int getLineNumber(void);

    AstNode* astRoot = nullptr;
%}

%union
{
	AstNode* ast;
    std::vector<AstNode*>* astvec;
	Symbol* symbol;
};

%token KW_BYTE
%token KW_INT
%token KW_REAL
%token KW_IF
%token KW_ELSE
%token KW_DO
%token KW_WHILE
%token KW_READ
%token KW_PRINT
%token KW_RETURN
%token OPERATOR_LE
%token OPERATOR_GE
%token OPERATOR_EQ
%token OPERATOR_DIF
%token<symbol> TK_IDENTIFIER
%token<symbol> LIT_INT
%token<symbol> LIT_CHAR
%token<symbol> LIT_REAL
%token<symbol> LIT_STRING
%token TOKEN_ERROR

%type<ast> value
%type<ast> expr func_call arg_list
%type<astvec> arg_item 

%right '=' '~'
%left '&' '|'
%left '<' '>' OPERATOR_LE OPERATOR_GE OPERATOR_EQ OPERATOR_DIF
%left '+' '-'
%left '*' '/'

%%

program: decl_list

decl_list: decl decl_list
    |
    ;

decl: var_decl | func_decl
    ;

var_decl: var_def '=' value ';' | array_decl ';'
    ;

var_def: type TK_IDENTIFIER
    ;

type: KW_BYTE | KW_INT | KW_REAL
    ;

value: LIT_INT                                      { $$ = createAstNode(AstNodeType::SYMBOL, {}, $1); }
    | LIT_CHAR                                      { $$ = createAstNode(AstNodeType::SYMBOL, {}, $1); }
    | LIT_REAL                                      { $$ = createAstNode(AstNodeType::SYMBOL, {}, $1); }
    ;

array_decl: var_def '[' LIT_INT ']'
    | var_def '[' LIT_INT ']' '=' array_init
    ;

array_init: value
    | value ',' array_init
    ;

func_decl: var_def '(' param_list ')' cmd_block
    ;

param_list: param_item
    |
    ;

param_item: var_def
    | var_def ',' param_item
    ;

cmd_block: '{' cmd_list '}'
    ;

cmd_list: cmd cmd_list
    |
    ;

cmd: assign_cmd
    | if_cmd
    | while_do_cmd
    | do_while_cmd
    | read_cmd
    | print_cmd
    | return_cmd
    | cmd_block
    | ';'
    ;

assign_cmd: TK_IDENTIFIER '=' expr ';'              { printAst($3); }
    | array_elem '=' expr ';'
    ;

array_elem: TK_IDENTIFIER '[' expr ']'
    ;

if_cmd: KW_IF '(' expr ')' cmd
    | KW_IF '(' expr ')' cmd KW_ELSE cmd
    ;

while_do_cmd: KW_WHILE expr KW_DO cmd
    ;

do_while_cmd: KW_DO cmd KW_WHILE expr ';'
    ;

read_cmd: KW_READ TK_IDENTIFIER ';'
    ;

print_cmd: KW_PRINT print_list ';'
    ;

print_list: print_item
    | print_item print_list
    ;

print_item: LIT_STRING | expr
    ;

return_cmd: KW_RETURN expr ';'
    ;

expr: TK_IDENTIFIER                                 { $$ = createAstNode(AstNodeType::SYMBOL, {}, $1); }
    | array_elem
    | expr '+' expr                                 { $$ = createAstNode(AstNodeType::ADD, {$1, $3}); }
    | expr '-' expr                                 { $$ = createAstNode(AstNodeType::SUB, {$1, $3}); }
    | expr '*' expr                                 { $$ = createAstNode(AstNodeType::MULT, {$1, $3}); }
    | expr '/' expr                                 { $$ = createAstNode(AstNodeType::DIV, {$1, $3}); }
    | expr '<' expr                                 { $$ = createAstNode(AstNodeType::LESS, {$1, $3}); }
    | expr '>' expr                                 { $$ = createAstNode(AstNodeType::GREATER, {$1, $3}); }
    | expr '&' expr                                 { $$ = createAstNode(AstNodeType::AND, {$1, $3}); }
    | expr '|' expr                                 { $$ = createAstNode(AstNodeType::OR, {$1, $3}); }
    | expr OPERATOR_LE expr                         { $$ = createAstNode(AstNodeType::LE, {$1, $3}); }
    | expr OPERATOR_GE expr                         { $$ = createAstNode(AstNodeType::GE, {$1, $3}); }
    | expr OPERATOR_EQ expr                         { $$ = createAstNode(AstNodeType::EQ, {$1, $3}); }
    | expr OPERATOR_DIF expr                        { $$ = createAstNode(AstNodeType::DIF, {$1, $3}); }
    | '~' expr                                      { $$ = createAstNode(AstNodeType::NOT, {$2}); }
    | '(' expr ')'                                  { $$ = $2; }
    | func_call
    | value
    ;

func_call: TK_IDENTIFIER '(' arg_list ')'           { $$ = createAstNode(AstNodeType::FUNC_CALL, {$3}, $1); }
    ;

arg_list: arg_item                                  { $$ = createAstNode(AstNodeType::ARG_LIST, *$1); }
    |                                               { $$ = nullptr; }
    ;

arg_item: expr                                      { $$ = createAstNodeList($1); }
    | expr ',' arg_item                             { $$ = insertAstNodeItem($1, $3); }
    ;

%%

void yyerror(const char *s) {
    fprintf(stderr, "Syntax error at line: %d\n", getLineNumber());
    exit(3);
}